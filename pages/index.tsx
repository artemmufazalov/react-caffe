// Libs
import React from 'react';
import { useSelector } from 'react-redux';
import qs from 'qs';
import { useRouter } from 'next/router';

// Components
import {
	Categories,
	Sort,
	PizzaSkeleton,
	PizzaBlock,
	Pagination,
} from '../src/components';

// Types
import { PizzaInterface } from '../src/redux/slices/generalTypes';
import { LoadingStatusType } from '../src/redux/slices/pizza/types';

// Redux
import { useAppDispatch } from '../src/redux/store';
import {
	setCurrentPage,
	setFilters,
} from '../src/redux/slices/filter/filterSlice';
import { fetchPizzas } from '../src/redux/slices/pizza/asyncActions';
import { selectFilterValues } from '../src/redux/slices/filter/selectors';
import {
	selectPizzasLoadingStatus,
	selectItems,
} from '../src/redux/slices/pizza/selectors';

const Home: React.FC = () => {
	const router = useRouter();
	const dispatch = useAppDispatch();

	// –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞.
	// –ï—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ç–æ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä –ø–∏—Ü—Ü, –∞ –∂–¥–µ–º, –ø–æ–∫–∞ —Å–ø–∞—Ä—Å—è—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	const isParsingFirstInteractionUrlQuery = React.useRef(false);

	const isMount = React.useRef(false);

	const {
		activeCategoryIndex,
		activeSortingProperty,
		sortingOrder,
		searchValue,
		currentPage,
	} = useSelector(selectFilterValues);

	const items: PizzaInterface[] = useSelector(selectItems);
	const pizzasLoadingStatus: LoadingStatusType = useSelector(
		selectPizzasLoadingStatus
	);

	const onPageChange = React.useCallback(
		(page: number) => {
			dispatch(setCurrentPage(page));
			window.scrollTo(0, 0);
		},
		[dispatch]
	);

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º url-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö –≤ state
	React.useEffect(() => {
		if (window.location.search) {
			const params: qs.ParsedQs = qs.parse(
				window.location.search.substring(1)
			);
			dispatch(setFilters(params));
			isParsingFirstInteractionUrlQuery.current = true;
		}
	}, [dispatch]);

	// –î–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ query string –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
	React.useEffect(() => {
		if (isMount.current) {
			const queryString = qs.stringify({
					sort: activeSortingProperty.sortingProperty,
					order: sortingOrder,
					categoryId: activeCategoryIndex,
					search: searchValue,
					page: currentPage,
				}),
				currentQuery = qs.stringify(router.query);

			if (currentQuery !== queryString) {
				router.push(`?${queryString}`);
			}
		}
		isMount.current = true;
	}, [
		activeSortingProperty,
		sortingOrder,
		searchValue,
		currentPage,
		activeCategoryIndex,
		router,
	]);

	// –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ —Å–ø–∞—Ä—Å–∏–ª–∏—Å—å –∏–ª–∏ –∏—Ö –Ω–µ—Ç, —Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–µ–∫ –∑–∞ –ø–∏—Ü—Ü–∞–º–∏
	React.useEffect(() => {
		if (!isParsingFirstInteractionUrlQuery.current) {
			dispatch(fetchPizzas(''));
		}
		isParsingFirstInteractionUrlQuery.current = false;
	}, [
		dispatch,
		activeSortingProperty,
		sortingOrder,
		searchValue,
		currentPage,
		activeCategoryIndex,
	]);

	const [skeletons, setSkeletons] = React.useState<React.ReactNode[]>([]);

	React.useEffect(() => {
		setSkeletons(
			[...new Array(4)].map((_, i) => <PizzaSkeleton key={i} />)
		);
	}, [items]);

	const pizzaBlocks = items.map((pizza) => (
		<PizzaBlock {...pizza} key={pizza['id']} />
	));

	return (
		<div className="container">
			<div className="content__top">
				<Categories />
				<Sort />
			</div>
			<h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
			{pizzasLoadingStatus === 'error' && (
				<div className="content__error-info">
					<h2>
						–ü–∏—Ü—Ü—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å <span>üòï</span>
					</h2>
					<br />
					<p>
						–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–∏—Ü—Ü—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ
						–æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–¥–Ω–µ–µ.
					</p>
				</div>
			)}
			<div className="content__items">
				{pizzasLoadingStatus === 'pending' ? skeletons : pizzaBlocks}
			</div>
			{pizzasLoadingStatus !== 'error' && (
				<Pagination
					onPageChange={onPageChange}
					currentPage={currentPage}
				/>
			)}
		</div>
	);
};

export default Home;
